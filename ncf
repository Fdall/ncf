#!/usr/bin/python3

# This will become the main command line tool for ncf

import os
import sys
import shutil
import json
import grp
from pprint import pprint

DEFAULT_NCF_DIR = '/usr/share/ncf'

NCF_DIR = os.path.dirname(os.path.realpath(__file__))
NCF_TREE_DIR  = os.path.join(NCF_DIR, 'tree')
NCF_TOOLS_DIR = os.path.join(NCF_DIR, 'tools')
GROUP_OWNER = 'rudder'

sys.path[0:0] = [NCF_TOOLS_DIR, DEFAULT_NCF_DIR]

import ncf

def get_ncf_dir():
  # Try the directory this script is run from first (in case of a git clone)
  # Otherwise use the system default path
  target_dirs = [ NCF_TREE_DIR, os.path.join(DEFAULT_NCF_DIR, 'tree') ]
  for dir in target_dirs:
    if os.path.isdir(dir):
      return dir

  # If none found, return None
  return None

def init(args):

  # First argument is dir name, unless not specified then we use current dir
  if len(args) == 0:
    init_dir = os.getcwd()
    print("INFO: No path specified, using current directory")
  else:
    init_dir = args[0]

  print("INFO: Initialising in " + init_dir)

  # Check if this directory is already a ncf instance
  if os.path.isdir(init_dir) and set(ncf.dirs).intersection(set(os.listdir(init_dir))):
    print("ERROR: It looks like this directory is already initialized. Aborting")
    exit(2)

  for component_dir in ncf.dirs:
    target_dir = os.path.join(init_dir, component_dir)
    os.makedirs(target_dir)
    shutil.copy(os.path.join(get_ncf_dir(), component_dir, "README.md"), target_dir)

  print("INFO: Success")

def write_everything(path):
  write_all_methods(path)
  # Write all 6.X
  write_all_techniques(path,False)
  # Write all 5.0
  write_all_techniques(path,True)

def write_all_methods(path):
  methods = ncf.get_all_generic_methods_metadata()

  methodsFile = '/var/rudder/configuration-repository/ncf/generic_methods.json'
  gid = grp.getgrnam(GROUP_OWNER)[2]
  if not os.path.exists(os.path.dirname(methodsFile)):
    os.makedirs(os.path.dirname(methodsFile))
    os.chown(os.path.dirname(methodsFile), -1, gid)
  with open(methodsFile, 'w') as outfile:
    json.dump(methods["data"]["generic_methods"], outfile, indent=2)
  os.chown(methodsFile, -1, gid)

def write_all_techniques(path, migrate_old):
  techniques = ncf.get_all_techniques_metadata(True,migrate_old)
  for bundle_name in techniques["data"]["techniques"]:
    technique = techniques["data"]["techniques"][bundle_name]
    category = technique["category"] if len(technique["category"]) > 0 else "ncf_techniques"
    version = technique["version"] if len(technique["version"]) > 0 else "1.0"
    techniqueFile = '/var/rudder/configuration-repository/techniques/'+category+"/"+ bundle_name +"/"+version+'/technique.json'
    if not os.path.exists(techniqueFile):
      with open('/var/rudder/configuration-repository/techniques/'+category+"/"+ bundle_name +"/"+version+'/technique.json', 'w') as outfile:
        json.dump(technique, outfile, indent=2)
      os.chown(techniqueFile, -1, grp.getgrnam(GROUP_OWNER)[2])


def usage():
  sys.stderr.write("Can't parse parameters\n")
  print("Usage: ncf <command> [arguments]")
  print("Available commands:")
  print(" - init <ncf_path>")
  print(" - techniques_metadata <ncf_path>")


if __name__ == '__main__':

  if len(sys.argv) <= 1:
    usage()
    exit(1)

  if sys.argv[1] == "init":
    init(sys.argv[2:])
  elif sys.argv[1] == "write_all_techniques":
    # Write all 6.X
    write_all_techniques("", False)
    # write all 5.0
    write_all_techniques("", True)
  elif sys.argv[1] == "write_all_methods":
    write_all_methods("")
  elif sys.argv[1] == "write_everything":
    write_everything("")
  else:
    usage()
    exit(1)


