#######################################################
#
# Launch the /bin/date command
#
#######################################################

bundle common acc_path
{
  vars:
    "root" string => getenv("NCF_TESTS_ACCEPTANCE", 1024);
}

body common control
{
      inputs => { "${acc_path.root}/default.cf.sub", "${acc_path.root}/default_ncf.cf.sub", "@{ncf_inputs.default_files}" };
      bundlesequence  => { configuration, default("${this.promise_filename}") };
      version => "1.0";
}

#######################################################

bundle agent init
{
  vars:
    "command_name"            string => "/bin/date | egrep '[0-9]'";
    "canonified_command_name" string => canonify("${command_name}");

    "file_name"                     string => execresult("echo $RANDOM", "useshell");
    "audit_command_name"            string => "touch ${file_name}";
    "canonified_audit_command_name" string => canonify("${audit_command_name}");
}

#######################################################

bundle agent test
{
  methods:
    "ph1" usebundle => command_execution("${init.command_name}");

    "enable" usebundle => set_dry_run_mode("true");
    "ph1" usebundle => command_execution("${init.audit_command_name}");
    "disable" usebundle => set_dry_run_mode("false");
}

#######################################################

bundle agent check
{
  classes:
    "enforce_ok" expression => "command_execution_${init.canonified_command_name}_ok.!command_execution_${init.canonified_command_name}_error";
    
    "file_exists" expression => fileexists("${init.file_name}");
    "audit_ok" expression => "command_execution_${init.canonified_audit_command_name}_error.!command_execution_${init.canonified_audit_command_name}_repaired.!command_execution_${init.canonified_audit_command_name}_ok.!file_exists";

    "ok" expression => "enforce_ok.audit_ok";

  reports:
    ok::
      "$(this.promise_filename) Pass";
    !ok::
      "$(this.promise_filename) FAIL";
}
