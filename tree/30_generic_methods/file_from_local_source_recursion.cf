#####################################################################################
# Copyright 2013 Normation SAS
#####################################################################################
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, Version 3.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
#####################################################################################

# @name File from local source recursion
# @description Ensure that a file or directory is copied from a local source
# @documentation Ensure that a file or directory is copied from a local source.
# If the source is a directory, you can force a maximum level of copy recursion.
#
# * *0* being no recursion, which will only create an empty folder
# * *inf* being a complete recursive copy of the folder
# * *1,2,3,...* will force the maximal level of recursion to copy
#
# @parameter source      Source file (absolute path on the target node)
# @parameter destination Destination file (absolute path on the target node)
# @parameter recursion   Recursion depth to enforce for this path (0, 1, 2, ..., inf)
#
# @class_prefix file_from_local_source
# @class_parameter destination

bundle agent file_from_local_source_recursion(source, destination, recursion)
{
  vars:
      "old_class_prefix" string => canonify("file_from_local_source_${destination}");
      "args"              slist => { "${source}", "${destination}", "${recursion}" };
      "report_param"      string => join("_", args);
      "full_class_prefix" string => canonify("file_from_local_source_${report_param}");
      "class_prefix"      string => string_head("${full_class_prefix}", "1000");

  classes:
      # depth_search prevents from copying file/symlink
      # so we need to detect if we want to copy a folder or a file
      # If we check if it is a file, the class will always be true
      # event if was in fact a directory. Then, we test if it is a dir.
      "is_dir_copy"  expression => isdir("${destination}");
      # We won't be able to know if it is really a directory
      # or not before the first iteration
      "iteration_2"  expression => "iteration_1";
      "iteration_1"  expression => "any";

  files:
   !is_dir_copy::
      "${destination}"
        copy_from    => ncf_local_cp_method("${source}", "digest"),
        classes      => classes_generic_two("${old_class_prefix}", "${class_prefix}");

   is_dir_copy::
      "${destination}"
        copy_from    => ncf_local_cp_method("${source}", "digest"),
        depth_search => recurse("${recursion}"),
        classes      => classes_generic_two("${old_class_prefix}", "${class_prefix}");

  methods:
    # The reports should only be made after we know if this is a
    # directory (to apply recursion) or a file
    iteration_2.!is_dir_copy::
      "report"
        usebundle  => _log_v3("Copying ${destination} from ${source}", "${destination}", "${old_class_prefix}", "${class_prefix}", @{args});

    iteration_2.is_dir_copy::
      "report"
        usebundle  => _log_v3("Copying ${destination} from local ${source}, recursion level ${recursion}", "${destination}", "${old_class_prefix}", "${class_prefix}", @{args});
}
