#####################################################################################
# Copyright 2013 Normation SAS
#####################################################################################
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, Version 3.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
#####################################################################################

# @name Package check installed
# @description Verify if a package is installed in any version
# @documentation This bundle will define a condition `package_check_installed_${file_name}_{ok, reached, kept}` if the
# package is installed, or `package_check_installed_${file_name}_{not_ok, reached, not_kept, failed}` if
# the package is not installed
#
# @parameter package_name Name of the package to check
#
# @class_prefix package_check_installed
# @class_parameter package_name

bundle agent package_check_installed(package_name)
{
  vars:
      "old_class_prefix"        string => canonify("package_check_installed_${package_name}");
      "args"                     slist => { "${package_name}" };

      "report_param"            string => join("_", args);
      "full_class_prefix"       string => canonify("package_check_installed_${report_param}");
      "class_prefix"            string => string_head("${full_class_prefix}", "1000");

      "inner_args"              string => { "${package_name}", "any", "", "", "present", "" };
      "inner_report_param"      string => join("_", inner_args);
      "full_inner_class_prefix" string => canonify("ncf_package_${inner_report_param}");
      "inner_class_prefix"      string => string_head("${full_inner_class_prefix}", "1000");

  classes:
      "should_report"    expression => "${report_data.should_report}";

  methods:
      "disable_reporting"   usebundle => disable_reporting;
      "remove_dry_run_mode" usebundle => push_dry_run_mode("true");

      "check install"       usebundle => ncf_package("${package_name}", "any", "", "", "present", "");

      "restore dry-run"     usebundle => pop_dry_run_mode();
      "reenable_reporting"  usebundle => enable_reporting,
                           ifvarclass => "should_report";

      "copy old classes"    usebundle => _classes_copy("${inner_class_prefix}", "${old_class_prefix}");
      "copy classes"        usebundle => _classes_copy("${inner_class_prefix}", "${class_prefix}");

      "report"
        usebundle  => _log_v3("Check that package ${package_name} is installed", "${package_name}", "${old_class_prefix}", "${class_prefix}", @{args});
}
