#####################################################################################
# Copyright 2013 Normation SAS
#####################################################################################
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, Version 3.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
#####################################################################################

# @name File copy from local source
# @rename file_from_local_source
# @deprecated Use [file_from_local_source](#_file_from_local_source) instead.
# @description Ensure that a file or directory is copied from a local source
#
# @parameter source      Source file (absolute path on the target node)
# @parameter destination Destination file (absolute path on the target node)
#
# @class_prefix file_copy_from_local_source
# @class_parameter destination

bundle agent file_copy_from_local_source(source, destination)
{
  vars:
      "old_class_prefix"  string => canonify("file_copy_from_local_source_${destination}");

      "args"               slist => { "${source}", "${destination}" };
      "report_param"      string => join("_", args);
      "full_class_prefix" string => canonify("file_copy_from_local_source_${report_param}");
      "class_prefix"      string => string_head("${full_class_prefix}", "1000");

      # Call file_copy_from_local_source_recursion with 0 as recursion value
      "full_inner_class_prefix" string => canonify("file_copy_from_local_source_${report_param}_0");
      "inner_class_prefix"      string => string_head("${full_inner_class_prefix}", "1000");


  classes:
      "should_report"    expression => "${report_data.should_report}";

  methods:
      "disable_reporting_${class_prefix}"     usebundle => disable_reporting;
      "copy without recursion" usebundle => file_copy_from_local_source_recursion("${source}", "${destination}", "0");
      "reenable_reporting_${class_prefix}"    usebundle => enable_reporting,
                              ifvarclass => "should_report";
      #"old result classes"     usebundle => _classes_copy("${inner_class_prefix}", "${old_class_prefix}"),
      #                        ifvarclass => "${inner_class_prefix}_reached";
      "new result classes"     usebundle => _classes_copy("${inner_class_prefix}", "${class_prefix}"),
                              ifvarclass => "${inner_class_prefix}_reached";

      "report"                 usebundle => _log_v3("Copying ${destination} from local ${source}", "${destination}", "${old_class_prefix}", "${class_prefix}", @{args});
}
