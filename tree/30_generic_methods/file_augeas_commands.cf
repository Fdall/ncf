#####################################################################################
# Copyright 2020 Normation SAS
#####################################################################################
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, Version 3.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
#####################################################################################
#
# @name File Augeas commands
# @description Use Augeas binaries to execute augtool commands and options directly on the agent.
#
# @documentation Augeas is a tool that provides an abstraction layer for all the complexities that turn around editing files with regular expressions.
# It's a tree based hierarchy tool, that handles system configuration files where you can securely modify your files and to do so you have to provide
# the path to the node label's value.
# Augeas uses lenses which are like sort of modules that are in charge of identifying and converting files into tree and back.
# This way, you can manipulate at first the tree and then save changes into the configuration files on the system.
#
# This method gives the possibility to enter a list of augtool commands and options as a parameter. The method has in total 4 parameters: variable_prefix, variable_name, commands and autoload.
# Augtool provides bunch of other commands and options that you can use in this generic method such as 'match' to print the matches for a specific
# path expression, 'span' to print position in input file corresponding to tree, 'retrieve' to transform tree into text and 'save' to save all pending changes.
# If Augeas isn't installed on the agent, it will produces an error.
#
# The particular thing you may want to do with this method is using it depending on you needs and in two cases.
#
# #### With autoload
#
# The first case includes activating the `autoload` option, it is `true` by default, means you can leave the `autoload` parameter's field empty and Augeas will
# accordingly charge all files and lenses before executing the commands you have specified. Below is an example that will shows as a result the configuration
# files that are parsed by default in `/files/etc` directory and then also print the content of the `sshd_config` file, you can either leave the `autoload`
# parameter empty or fill it by putting `true` as a value.
#
# ```
# file_augeas_commands("label","value","ls /files/etc \n print /files/etc/ssh/sshd_config","")
# file_augeas_commands("label","value","ls /files/etc \n print /files/etc/ssh/sshd_config","true")
# ```
#
# #### Without autoload
#
# The second case is when you deactivate that option which means that you are specifying `false` as parameter and in this case you have to
# charge manually your files and lenses in the commands parameter by using the set commands. Below is the second example where you can for example set
# the lens and the file then verifying by checking the `/augeas/load` path.
#
# ```
# file_augeas_commands("label","value","set /augeas/load/Sshd/lens "Sshd.lns \n set /augeas/load/Sshd/incl "/etc/ssh/sshd_config" \n load \n print /augeas/load/Sshd \n print /augeas/load/Sshd \n print /files/etc/ssh/sshd_config","false")
# ```
#
# @parameter variable_prefix The prefix of the variable name
# @parameter variable_name   The variable to define, the full name will be variable_prefix.variable_name
# @parameter commands        The augeas command(s)
# @parameter autoload        Deactivate the `autoload` option if you don't want augeas to charge all the files/lens, it's `true` by default.
# @parameter_constraint autoload "allow_empty_string" : true
# @parameter_constraint autoload "select" : [ "", "true", "false" ]
# @class_prefix file_augeas_commands
# @class_parameter variable_name


bundle agent file_augeas_commands(variable_prefix, variable_name, commands, autoload)
{
 vars:
     "old_class_prefix" string => canonify("file_augeas_commands_${variable_name}");
     "promisers" slist => { @{this.callers_promisers}, cf_null }, policy => "ifdefined";
     "class_prefix" string => canonify(join("_", "promisers"));
     "args" slist => {"${variable_prefix}", "${variable_name}", "${commands}", "${autoload}"};

   pass1.!autoload_defined::
     "${variable_prefix}.${variable_name}" string =>  execresult("printf \"${commands}\n\" | ${ncf_paths.path[augtool]} --noautoload","useshell");

   pass1.autoload_defined::
     "${variable_prefix}.${variable_name}" string =>  execresult("printf \"${commands}\n\" | ${ncf_paths.path[augtool]}","useshell");


 defaults:
     "autoload" string => "true", if_match_regex => "";

 classes:
    "pass2" expression => "pass1";
    "pass1";

   pass1::
     "autoload_defined" expression => strcmp("${autoload}", "true");

   pass2::
     "variable_defined" expression => isvariable("${variable_prefix}.${variable_name}");
     "augeas_binaries" expression => fileexists("${ncf_paths.path[augtool]}");

 methods:
    pass2.augeas_binaries.variable_defined::
       "success" usebundle => _classes_success("${old_class_prefix}");
       "success" usebundle => _classes_success("${class_prefix}");
       "report" usebundle => _log("Executing ${commands}", "${old_class_prefix}", "${class_prefix}", @{args});

    pass2.augeas_binaries.!variable_defined::
      "failure" usebundle => _classes_failure("${old_class_prefix}");
      "failure" usebundle => _classes_failure("${class_prefix}");
      "report" usebundle => _log("Augeas binaries does exist, but your request has failed. Executing ${commands}","${old_class_prefix}", "${class_prefix}", @{args});

    pass2.!augeas_binaries::
      "failure" usebundle => _classes_failure("${old_class_prefix}");
      "failure" usebundle => _classes_failure("${class_prefix}");
      "report" usebundle => _log("Augeas binaries does not exist.", "${old_class_prefix}", "${class_prefix}", @{args});

}

