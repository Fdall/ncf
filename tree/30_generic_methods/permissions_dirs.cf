#####################################################################################
# Copyright 2013 Normation SAS
#####################################################################################
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, Version 3.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
#####################################################################################

# @name Permissions dirs
# @description Verify if a directory has the right permissions non recursively
#
# @parameter path      Path of the directory
# @parameter mode      Mode to enforce
# @parameter owner     Owner to enforce
# @parameter group     Group to enforce
#
# @class_prefix permissions
# @class_parameter path

bundle agent permissions_dirs(path, mode, owner, group)
{
  vars:
      "old_class_prefix"        string => canonify("permissions_${path}");
      "uniq_old_class_prefix"   string => canonify("${report_data.directive_id}_permissions_${path}");

      "args"                     slist => { "${path}", "${mode}", "${owner}", "${group}" };
      "report_param"            string => join("_", args);
      "full_class_prefix"       string => canonify("permissions_${report_param}");
      "class_prefix"            string => string_head("${full_class_prefix}", "1000");

      "full_inner_class_prefix" string => canonify("${report_data.directive_id}_${report_data.directive}_permissions_${report_param}_directories_0");
      "uniq_class_prefix"       string => string_head("${full_inner_class_prefix}", "1000");

  classes:
      "should_report_${uniq_class_prefix}" expression => "${report_data.should_report}";

  methods:
      "disable_reporting_${uniq_class_prefix}"            usebundle => disable_reporting;
      "permission without recursion_${uniq_class_prefix}" usebundle => permissions_type_recursion("${path}", "${mode}", "${owner}", "${group}", "directories", "0");
      "reenable_reporting_${uniq_class_prefix}"           usebundle => enable_reporting,
        ifvarclass => "should_report_${uniq_class_prefix}";


      "old result classes"  usebundle => _classes_copy("${uniq_class_prefix}", "${old_class_prefix}");
      "old result classes"  usebundle => _classes_copy("${uniq_class_prefix}", "${class_prefix}");

      "report"              usebundle => _log_v3("Ensure permissions mode ${mode}, owner ${owner} and group ${group} on dirs ${path}", "${path}", "${uniq_old_class_prefix}", "${uniq_class_prefix}", @{args});
}
