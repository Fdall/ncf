#####################################################################################
# Copyright 2014 Normation SAS
#####################################################################################
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, Version 3.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
#####################################################################################

# @name Service check started at boot
# @description Check if a service is set to start at boot using the appropriate method
#
# @parameter service_name  Service name (as recognized by systemd, init.d, etc...)
#
# @class_prefix service_check_started_at_boot
# @class_parameter service_name
# This bundle will define a condition service_check_started_at_boot_${service_name}_{kept,ok,not_ok,failed,reached}

bundle agent service_check_started_at_boot(service_name)
{
  vars:
      "canonified_service_name" string => canonify("${service_name}");

      "old_class_prefix"        string => "service_check_started_at_boot_${canonified_service_name}";

      "args"                     slist => { "${service_name}" };
      "report_param"            string => join("_", args);
      "full_class_prefix"       string => canonify("service_check_started_at_boot_${report_param}");
      "class_prefix"            string => string_head("${full_class_prefix}", "1000");

      "full_inner_class_prefix" string => canonify("${report_data.canonified_directive_id}_ncf_services_${report_param}_is_enabled");
      "inner_class_prefix"      string => string_head("${full_inner_class_prefix}", "1000");



  classes:
      "should_report"     expression => "${report_data.should_report}";

  methods:
      "disable_reporting_${class_prefix}"
                           usebundle => disable_reporting;
      "check_enabled"      usebundle => ncf_services("${service_name}", "is-enabled"),
                             comment => "${report_data.directive_id}";

      "reenable_reporting_${class_prefix}"
                           usebundle => enable_reporting,
                          ifvarclass => "should_report";
      "class copy"         usebundle => _classes_copy("${inner_class_prefix}", "${old_class_prefix}"),
                          ifvarclass => "${inner_class_prefix}_reached";
      "new result classes" usebundle => _classes_copy("${inner_class_prefix}", "${class_prefix}"),
                          ifvarclass => "${inner_class_prefix}_reached";

      "reports"            usebundle => _log_v3("Check if service ${service_name} is started at boot", "${service_name}", "${old_class_prefix}", "${class_prefix}", @{args}),
                             comment => "${report_data.directive_id}";
}
