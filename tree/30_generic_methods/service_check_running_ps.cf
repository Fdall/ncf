#####################################################################################
# Copyright 2013 Normation SAS
#####################################################################################
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, Version 3.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
#####################################################################################

# @name Service check running ps
# @description Check if a service is running using ps
#
# @parameter service_regex Regular expression used to select a process in ps output
#
# @class_prefix service_check_running
# @class_parameter service_regex

bundle agent service_check_running_ps(service_regex)
{
  vars:
      "canonified_service_regex" string => canonify("${service_regex}");

      "old_class_prefix"        string => canonify("service_check_running_${service_regex}");

      "args"                     slist => { "${service_regex}" };
      "report_param"            string => join("_", args);
      "full_class_prefix"       string => canonify("service_check_running_${report_param}");
      "class_prefix"            string => string_head("${full_class_prefix}", "1000");

      "full_inner_class_prefix" string => canonify("${report_data.directive_id}_ncf_services_${report_param}_is_active_process");
      "inner_class_prefix"      string => string_head("${full_inner_class_prefix}", "1000");




  classes:
      "should_report"    expression => "${report_data.should_report}";

  methods:
      "disable_reporting_${class_prefix}"
                           usebundle => disable_reporting;
      "check_active"       usebundle => ncf_services("${service_regex}", "is-active-process"),
                             comment => "${report_data.directive_id}";

      "reenable_reporting_${class_prefix}"
                           usebundle => enable_reporting,
                          ifvarclass => "should_report";
      "class copy"         usebundle => _classes_copy("${inner_class_prefix}", "${old_class_prefix}"),
                          ifvarclass => "${inner_class_prefix}_reached";
      "new result classes" usebundle => _classes_copy("${inner_class_prefix}", "${class_prefix}"),
                          ifvarclass => "${inner_class_prefix}_reached";

      "report"
        usebundle => _log_v3("Check if the service ${service_regex} is started using ps", "${service_regex}", "${old_class_prefix}", "${class_prefix}", @{args}),
          comment => "${report_data.directive_id}";

}
