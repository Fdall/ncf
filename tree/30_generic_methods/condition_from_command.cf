#####################################################################################
# Copyright 2015 Normation SAS
#####################################################################################
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, Version 3.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
#####################################################################################

# @name Condition from command 
# @description Execute a command and create result conditions depending on its exit code
# @documentation This method executes a command, and defines a `${condition_prefix}_true` or a `${condition_prefix}_false` condition depending on the result of the command:
#
# * If the exit code is in the `true_codes` list, this will produce a kept outcome class and a `${condition_prefix}_true` condition
# * If the exit code is in the `false_codes` list, this will produce a repaired outcome class and a `${condition_prefix}_false` condition
# * If the exit code is not in the list, or if the command is not present, this will produce an error outcome class and no classes with `${condition_prefix}`
#
# The created condition is global to the agent.
#
# #### Example
#
# If you run a command `/bin/check_network_status` that output code 0, 1 or 2 in case of correct configuration, and 18 or 52 in case of invalid configuration,
# and you want to get this define a condition based on this command, you can use the following policy
#
# ```
# condition_from_command("network_correctly_defined", "/bin/check_network_status", "0,1,2", "18,52")
# ```
#
# * If the command exits 0, 1 or 2, then it will define the following conditions
# `network_correctly_defined_true`, `condition_from_command_network_correctly_defined_kept`, `condition_from_command_network_correctly_defined_reached`
# * If the command exits 18, 52, then it will define the following conditions
# `network_correctly_defined_false`, `condition_from_command_network_correctly_defined_kept`, `condition_from_command_network_correctly_defined_reached`
# * If the command exits any other code, then it will define the following conditions
# `condition_from_command_network_correctly_defined_error`, `condition_from_command_network_correctly_defined_reached`
# * Finally, if the command is not present on the node, it will define
# `condition_from_command_network_correctly_defined_error`, `condition_from_command_network_correctly_defined_reached`
#
# @parameter condition_prefix   The condition name
# @parameter command            The command to run
# @parameter true_codes         List of codes that produce a true status separated with commas (ex: 1,2,5)
# @parameter false_codes        List of codes that produce a false status separated with commas (ex: 3,4,6)
# 
# @class_prefix condition_from_command
# @class_parameter condition_prefix

bundle agent condition_from_command(condition_prefix, command, true_codes, false_codes)
{
  vars:
      "old_class_prefix"  string => canonify("condition_from_command_${condition_prefix}");
      "args"               slist => { "${condition_prefix}", "${command}", "${true_codes}", "${false_codes}" };
      "report_param"      string => join("_", args);
      "full_class_prefix" string => canonify("condition_from_command_${report_param}");
      "class_prefix"      string => string_head("${full_class_prefix}", "1000");

      "true_list"     slist => splitstring("${true_codes}", "\s*,\s*", "256");
      "false_list"    slist => splitstring("${false_codes}", "\s*,\s*", "256");

  methods:
      "report_info_true"
        usebundle  => _log_v3_mode("log_info", "Exit code command ${command} was correct, ${condition_prefix}_true defined", "${condition_prefix}", "${old_class_prefix}", "${class_prefix}", @{args}),
        ifvarclass => "${condition_prefix}_true";

      "report_info_false"
        usebundle  => _log_v3_mode("log_info", "Exit code command ${command} was not correct, ${condition_prefix}_false defined", "${condition_prefix}", "${old_class_prefix}", "${class_prefix}", @{args}),
        ifvarclass => "${condition_prefix}_false";

      "report"
        usebundle  => _log_v3("Execute the test command ${command} to create ${condition_prefix}_{true,false}", "${condition_prefix}", "${old_class_prefix}", "${class_prefix}", @{args}),
        ifvarclass => "${class_prefix}_reached";

  commands:
      "${command}"
        contain      => in_shell,
        classes      => classes_generic_return_boolean_list_two("${old_class_prefix}", "${class_prefix}", "${condition_prefix}", @{true_list}, @{false_list});
}
