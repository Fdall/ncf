#####################################################################################
# Copyright 2017 Normation SAS
#####################################################################################
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, Version 3.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
#####################################################################################

# @name Directory present
# @description Create a directory if it doesn't exist
#
# @parameter target Full path of directory to create (trailing '/' is optional)
#
# @class_prefix directory_present
# @class_parameter target

bundle agent directory_present(target)
{
  vars:
      "old_class_prefix"       string => canonify("directory_present_${target}");
      "uniq_old_class_prefix"  string => canonify("${report_data.directive_id}_directory_present_${target}");
      "args"                   slist => { "${target}" };

      "report_param"           string => join("_", args);
      "full_class_prefix"      string => canonify("directory_present_${report_param}");
      "class_prefix"           string => string_head("${full_class_prefix}", "1000");
      "full_uniq_class_prefix" string => canonify("${report_data.directive_id}_directory_present_${report_param}");
      "class_prefix"           string => string_head("${full_uniq_class_prefix}", "1000");

  files:
    "${target}/."
      create  => "true",
      classes => classes_generic_two("${uniq_old_class_prefix}", "${uniq_class_prefix}");

  methods:
    "new result classes" usebundle => _classes_copy("${uniq_class_prefix}", "${old_class_prefix}");
    "new result classes" usebundle => _classes_copy("${uniq_class_prefix}", "${class_prefix}");

    "report"             usebundle => _log_v3("Create directory ${target}", "${target}", "${uniq_old_class_prefix}", "${uniq_class_prefix}", @{args});
}
