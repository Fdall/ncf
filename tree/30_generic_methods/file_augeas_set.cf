#####################################################################################
# Copyright 2020 Normation SAS
#####################################################################################
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, Version 3.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
#####################################################################################
#
# @name File Augeas set
# @description Use augeas commands and options to set a node label's value.
#
# @documentation Augeas is a tool that provides an abstraction layer for all the complexities that turn around editing files with regular expressions.
# It's a tree based hierarchy tool, that handles system configuration files where you can securely modify your files and to do so you have to provide
# the path to the node label's value.
# Augeas uses lenses which are like sort of modules that are in charge of identifying and converting files into tree and back.
# This way, you can manipulate at first the tree and then save changes into the configuration files on the system.
#
# In this method, we introduce using augtool commands and options in order to set the value of a given node's label in the parameters
# (which means that you simply want to modify your configuration file), this can be done by specifying the path to it.
#
# Actually there are two ways you can use this method, either you simply provide a path to the node's label as a parameter or you specify a file
# associated with a lens then you put the regular path. When you only specify the path to the node's label, your request will includes by default Augeas
# charging all the lenses and files, on the other hand, if you have a specific file for example such as a Json file and you want to associate it
# to the existing Json lens, then in that case, you need to fill in addition the file and the lens parameter, this way Augeas won't load all its files and
# lenses except the ones you have specified.
#
# *Warning*: When you don't specify the file and lens to use, no backup of the file is made before
# editing it.
#
# *Note*: Specifying the file and lens makes the edition way faster as it avoids having to load
# all the default lenses and files.
#
# #### Two uses cases examples:
#
# In the first case, let's suppose that you want to simply set the value of the ip address of the first line in the `/etc/hosts` file to `192.168.1.5`,
# to do so you need to provide the path and value parameters.
#
# ```
# file_augeas_set("/etc/hosts/1/ipaddr","192.168.1.5", "", "");
# ```
#
# The second case includes two needs of using it, either you want to prevent Augeas from charging all lenses and files while executing your request or
# you want to associate the `Hosts` lens with the `/etc/hosts` file then set the value for the given path node.
#
# ```
# file_augeas_set("/etc/hosts/1/ipaddr","192.168.1.5","Hosts","/etc/hosts");
# ```
#
# @parameter path            The path to the file and node label
# @parameter value           The value to set
# @parameter lens            Load a specific lens (optional)
# @parameter file            Load a specific file (optional)
# @parameter_constraint file "allow_empty_string" : true
# @parameter_constraint lens "allow_empty_string" : true
# @class_prefix file_augeas_set
# @class_parameter path

bundle agent file_augeas_set(path, value, lens, file)
{
  vars:
      "old_class_prefix" string => canonify("file_augeas_set_${path}");
      "args" slist => {"${path}", "${value}", "${lens}","${file}"};
      "report_param" string => join("_", args);
      "class_prefix" string => canonify("file_augeas_set_${report_param}");

      "cpath" string => canonify("${path}");

    pass1.file_defined::
      "command" string => "printf \"set /augeas/load/${lens}/lens \"${lens}.lns\" \n set /augeas/load/${lens}/incl \"${file}\" \n load \n set /files${path} ${value} \n save \n errors\" | ${ncf_paths.path[augtool]} --noautoload --new";
      "cfile" string => canonify("${file}");

    pass1.!file_defined::
      "command" string => "printf \"set /files${path} ${value} \n save\" | ${ncf_paths.path[augtool]}";

    pass1.augeas_binaries.!pass2::
      "output" string => execresult("${command}", "useshell"), comment => "${path}";

  classes:
      "pass3" expression => "pass2";
      "pass2" expression => "pass1";
      "pass1";

      "should_report"    expression => "${report_data.should_report}";

    pass1::
      "augeas_binaries" expression => fileexists("${ncf_paths.path[augtool]}");
      "file_defined"    expression => not(strcmp("${file}",""));

    pass2.augeas_binaries::
      "repaired" expression => regcmp("Saved.*", "${output}");
      "kept"     expression => regcmp(" *\(no errors\)", "${output}");
      "error"    expression => regcmp("error:.*", "${output}");
      # failsafe in case nothing matched
      "error"    expression => "!kept.!repaired";

    pass3.augeas_binaries::
      "cp_ok"    expression => "file_from_local_source_${cfile}_ok";
      "ok"       expression => "!error",
                         if => "!file_defined";
      "ok"       expression => "!error.(!repaired|cp_ok)",
                         if => "file_defined";

  methods:
    pass2::
      "disable_reporting_${class_prefix}" usebundle => disable_reporting;
      # allows automatic backup in case file path was provided
      "copy file"    usebundle => file_from_local_source("${file}.augnew", "${file}"),
                            if => "file_defined.repaired";
      "remove"       usebundle => file_absent("${file}.augnew"),
                            if => fileexists("${file}.augnew");
      "reenable_reporting_${class_prefix}" usebundle => enable_reporting,
                                                  if => "should_report";

    pass3.augeas_binaries.ok.kept::
       "success" usebundle => _classes_success("${old_class_prefix}");
       "success" usebundle => _classes_success("${class_prefix}");
       "report"  usebundle => _log("Setting the node value for ${path}", "${old_class_prefix}", "${class_prefix}", @{args});

    pass3.augeas_binaries.ok.repaired::
       "repaired" usebundle => _classes_repaired("${old_class_prefix}");
       "repaired" usebundle => _classes_repaired("${class_prefix}");
       "report"   usebundle => _log("Setting the node value for ${path}", "${old_class_prefix}", "${class_prefix}", @{args});

    pass3.augeas_binaries.!ok::
      "failure" usebundle => _classes_failure("${old_class_prefix}");
      "failure" usebundle => _classes_failure("${class_prefix}");
      "report"  usebundle => _log("Augeas binaries does exist, but your request has failed. Setting the node value for ${path}","${old_class_prefix}", "${class_prefix}", @{args});

    pass3.!augeas_binaries::
      "failure" usebundle => _classes_failure("${old_class_prefix}");
      "failure" usebundle => _classes_failure("${class_prefix}");
      "report"  usebundle => _log("Augeas binaries does not exist.", "${old_class_prefix}", "${class_prefix}", @{args});

  reports:
    info::
      "Augeas output: ${output}";
}

