#####################################################################################
# Copyright 2019 Normation SAS
#####################################################################################
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, Version 3.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
#####################################################################################

# @name File key-value match regex
# @description Ensure that one parameter matches a given regex, on one single line, in the right hand side of a key->values line
# @documentation Audit the file, and verify that the `values` part from a key->values line matches a given regex.
#
# #### Example
# 
# If you have an initial file (`/etc/default/grub`) containing
# 
# ```
# GRUB_CMDLINE_XEN="dom0_mem=16G"
# ```
#
# To add parameter `dom0_max_vcpus=32` in the right hand side of the line, you'll need the following policy
#
# ```
# file_ensure_key_value_parameter_in_list("/etc/default/grub", "GRUB_CMDLINE", "=", "dom0_max_vcpus=32", " ", "\"", "\"");
# ```
#
# @parameter file File name to edit (absolute path on the target node)
# @parameter key Full key name
# @parameter key_value_separator character used to separate key and value in a key-value line
# @parameter regex Regex representing the regex which will be tested on values associated to given keys.
#
# @parameter_constraint key_value_separator "allow_whitespace_string" : true
#
# @class_prefix file_key_value_match_regex
# @class_parameter file

bundle agent file_key_value_match_regex(file, key, key_value_separator, regex)
{
  vars:
      "old_class_prefix"  string => canonify("file_key_value_match_regex_${file}");
      "args"               slist => { "${file}", "${key}", "${key_value_separator}", "${regex}" };
      "report_param"      string => join("_", args);
      "full_class_prefix" string => canonify("file_key_value_match_regex_${report_param}");
      "class_prefix"      string => string_head("${full_class_prefix}", "1000");


      "escaped_key"       string => escape("${key}");
      "escaped_parameter" string => escape("${parameter}");

      "lines_list"  slist => readstringlist("${file}", "", "\n", "99999999999", "99999999999");
      "lines_length"  int => length("lines_list");
      "indices" slist => expandrange("[1-${lines_length}]", 1);
      "lines[${indices}]" string => nth("lines_list", "${indices}");

    pass1.keys_found::
      "report_string" string => "";
      "report_string" string => "${report_string}${lines[${indices}]} => matches ${key}\s*${key_value_separator}\s*${regex}${const.endl}",
        ifvarclass => "value_match_${indices}.key_found_${indices}";
      "report_string" string => "${report_string}line ${lines[${indices}]} => DOES NOT matches ${key}\s*${key_value_separator}\s*${regex}${const.endl}",
        ifvarclass => "!value_match_${indices}.key_found_${indices}";


  classes:
      "pass2" expression => "pass1";
      "pass1" expression => "any";
      "keys_found" not => strcmp("${lines_length}", "0");

    keys_found::
      "key_found_${indices}" expression => regcmp("${key}\s*${key_value_separator}.*", "${lines[${indices}]}");
      "value_match_${indices}" expression => regcmp("${key}\s*${key_value_separator}\s*${regex}", "${lines[${indices}]}"),
        ifvarclass => "key_found_${indices}";

      "failed" expression => or("failed", and("key_found_${indices}", "!value_match_${indices}"));

  methods:
    keys_found.!failed::
      "success class" usebundle  => _classes_success("${old_class_prefix}");
      "success class" usebundle  => _classes_success("${class_prefix}");
    !keys_found|failed::
      "error_class"   usebundle => _classes_failure("${old_class_prefix}");
      "error_class"   usebundle => _classes_failure("${class_prefix}");
    pass2.keys_found::
      "report"   usebundle => _log_v3("${report_string}Verify that parameters in lines ${key} ${key_value_separator} values in ${file} match the regx ${regex}", "${file}", "${old_class_prefix}", "${class_prefix}", @{args});
    pass2.!keys_found::
      "report"   usebundle => _log_v3("No lines found corresponding to the given key, verify that parameters in lines ${key} ${key_value_separator} values in ${file} match the regx ${regex}", "${file}", "${old_class_prefix}", "${class_prefix}", @{args});

  reports:
   "${lines[${indices}]}"
     ifvarclass => "value_match_${indices}";
     #ifvarclass => "key_found_${indices}";
}
